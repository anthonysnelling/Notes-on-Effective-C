=================================
OBJECTS AND FUNCTIONS
=================================
-every type in C is either an object or a function type

-An 'object' is storage in which you can represent values
or precisely: "a region of data storage in the execution environment, the contents
of which can represent values. When  referenced, an object can be interpreted as 
having a particular type."

- Variables have a declared type that tells you the kind of object its value represent.

-Functions are NOT objects, but do have types, Characterized by both its return type and the 
number of and types of its parameters.

=================================
POINTERS
=================================
- C also has pointers, which can be thought of as an address- a location in memory where
an object or function is stored.

-A Pointer type is derived from a function or object type called the referenced type. 
A pointer type derived from the referenced type 'T' is called a 'pointer' to 'T'

-objects and functions are different things, so are object pointers and function pointers

-C is a call by value language, which means when provide an argument to a function, the value
of that argument is copied into a distinct variable, for use within the function.

-When used in a function declaration or definition, * act as part of a pointer declarator
indicating that the parameter is a pointer to an object function of a specific type.

-When you use * in expressions within the function, the * operator dereferences the pointer to the object

- & is the 'address-of' operator, which generates a pointer to its operand.

=================================
STORAGE DURATION
=================================
- Objects have a storage duration that determines their lifetime. Altogether, four storage duration are available:
automatic, static, thread, and allocated.

- objects of automatic storage duration are declared within a block or as a function parameter
the lifetime of these objects begins when the block in which they're declared begins execution,
and ends when the execution of the block ends. if the block is entered recursively, a new object 
is created each time, each with its own storage.

-Objects declared in file scope have static storage duration. The lifetime of these objects is 
the entire execution of the program, their stored value is initialized to program startup.

- You can also use the specifier 'static', within a block scope to give static storage duration to a variable.
These objects persist after the function has exited.

- Thread storage duration is used in concurrent programming.

- allocated storage duration deals with dynamically allocated memory.

=================================
ALIGNMENT
=================================
-Object types have alignment requirements that place restrictions on the addresses 
at which objects of that type may be allocated. 

-An aligment represents the number of bytes between successive addresses at which a 
given  object can be allocated

-alignments are represented as values of the type 'size_t'. Every valid alignment value is 
a nonnegative integral power of two.

- An object type imposes a default aligment requirement on every object of that type: a stricter
aligment (a larger power of two) can be requested using the aligment specifier(_Alignas).   

=================================
STRUCTS
=================================
- Structs contain sequentially allocated member objects. Each object has its own name and may have a distinct type
unlike arrays, which must all be of the same type.

- structs are useful for declaring collections of related objects and represent things like, a customer, or
personnel record.

- are especially useful for grouping objects that are frequently passed together as arguments to a function,
so you don't have to pass individual objects separately.

- can use -> to point to one of its members